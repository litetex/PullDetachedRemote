name: Release

on:
  push:
    branches: master

jobs:
  build_check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
      
    - name: Install dependencies
      run: dotnet restore
      working-directory: src
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: src
      
    - name: Test
      run: dotnet test --no-restore --verbosity normal
      working-directory: src

  create_release:
    runs-on: ubuntu-latest
    needs: [build_check]
    outputs:
       upload_url: ${{ steps.create_draft.outputs.upload_url }}
       version: ${{ steps.create_version.outputs.version }}
       version_minor: ${{ steps.create_version.outputs.version_minor }}
       version_major: ${{ steps.create_version.outputs.version_major }}

    steps:
    - name: Release - Create Draft for Release
      id: create_draft
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate version - Cut away the first letter (v)
      id: create_version
      run: |
        tag_name=${{ steps.create_draft.outputs.tag_name }}
        echo "::set-output name=version::$(echo ${tag_name:1})"
        echo "::set-output name=version_minor::$(echo ${tag_name:1:3})"
        echo "::set-output name=version_major::$(echo ${tag_name:1:1})"

  build_publish_docker:
    runs-on: ubuntu-latest
    needs: [create_release]

    steps:
    - uses: actions/checkout@v2
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    
    - name: Publish
      run: dotnet publish -c Release -r alpine.3.9-x64 -p:PublishSingleFile=true -p:DebugType=None -p:Version=${{ needs.create_release.outputs.version }} 
      working-directory: src/PullDetachedRemote
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} 
        asset_path: ./src/PullDetachedRemote/bin/Release/netcoreapp3.1/alpine.3.9-x64/publish/PullDetachedRemote
        asset_name: PullDetachedRemote-alpine
        asset_content_type: application/octet-stream
        
    - name: Copy Dockerfile into build output
      run: cp build/Dockerfile src/PullDetachedRemote/bin/Release/netcoreapp3.1/alpine.3.9-x64/publish/
      
    - name: Generate tag vars
      id: tagvars
      run: |
       echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
       echo "::set-output name=build_datetime::$(date -u +%Y%m%d-%H%M)"
      
    - name: Builder Dockerimage and publish to Registry
      # Let's call this Publish-... when it actually builds and publishes... 
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: litetex/pulldetachedremote
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        tags: "latest,master-${{ steps.tagvars.outputs.sha_short }}-${{ steps.tagvars.outputs.build_datetime }},${{ needs.create_release.outputs.version }},${{ needs.create_release.outputs.version_minor }},${{ needs.create_release.outputs.version_major }}"
        workdir: src/PullDetachedRemote/bin/Release/netcoreapp3.1/alpine.3.9-x64/publish/

  after_release:
    runs-on: ubuntu-latest
    needs: [build_publish_docker]
    steps:
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        destination_branch: "develop"
        pr_title: "Sync back"
        pr_body: "An automated PR to sync changes back"
